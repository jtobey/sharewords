"use strict";
// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: dict/dict.proto
Object.defineProperty(exports, "__esModule", { value: true });
exports.Lexicon = exports.Metadata = exports.Macro_Clear = exports.Macro = exports.Sorting = exports.protobufPackage = void 0;
exports.sortingFromJSON = sortingFromJSON;
exports.sortingToJSON = sortingToJSON;
/* eslint-disable */
var wire_1 = require("@bufbuild/protobuf/wire");
exports.protobufPackage = "";
var Sorting;
(function (Sorting) {
    Sorting[Sorting["SORTING_UNSPECIFIED"] = 0] = "SORTING_UNSPECIFIED";
    Sorting[Sorting["SORTING_LEXICOGRAPHICAL_BY_CODE_POINT"] = 1] = "SORTING_LEXICOGRAPHICAL_BY_CODE_POINT";
    Sorting[Sorting["UNRECOGNIZED"] = -1] = "UNRECOGNIZED";
})(Sorting || (exports.Sorting = Sorting = {}));
function sortingFromJSON(object) {
    switch (object) {
        case 0:
        case "SORTING_UNSPECIFIED":
            return Sorting.SORTING_UNSPECIFIED;
        case 1:
        case "SORTING_LEXICOGRAPHICAL_BY_CODE_POINT":
            return Sorting.SORTING_LEXICOGRAPHICAL_BY_CODE_POINT;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Sorting.UNRECOGNIZED;
    }
}
function sortingToJSON(object) {
    switch (object) {
        case Sorting.SORTING_UNSPECIFIED:
            return "SORTING_UNSPECIFIED";
        case Sorting.SORTING_LEXICOGRAPHICAL_BY_CODE_POINT:
            return "SORTING_LEXICOGRAPHICAL_BY_CODE_POINT";
        case Sorting.UNRECOGNIZED:
        default:
            return "UNRECOGNIZED";
    }
}
function createBaseMacro() {
    return { clear: undefined, subword: undefined, backup: undefined };
}
exports.Macro = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.clear !== undefined) {
            exports.Macro_Clear.encode(message.clear, writer.uint32(10).fork()).join();
        }
        if (message.subword !== undefined) {
            writer.uint32(18).string(message.subword);
        }
        if (message.backup !== undefined) {
            writer.uint32(24).uint64(message.backup);
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMacro();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.clear = exports.Macro_Clear.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.subword = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.backup = longToNumber(reader.uint64());
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            clear: isSet(object.clear) ? exports.Macro_Clear.fromJSON(object.clear) : undefined,
            subword: isSet(object.subword) ? globalThis.String(object.subword) : undefined,
            backup: isSet(object.backup) ? globalThis.Number(object.backup) : undefined,
        };
    },
    toJSON: function (message) {
        var obj = {};
        if (message.clear !== undefined) {
            obj.clear = exports.Macro_Clear.toJSON(message.clear);
        }
        if (message.subword !== undefined) {
            obj.subword = message.subword;
        }
        if (message.backup !== undefined) {
            obj.backup = Math.round(message.backup);
        }
        return obj;
    },
    create: function (base) {
        return exports.Macro.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b;
        var message = createBaseMacro();
        message.clear = (object.clear !== undefined && object.clear !== null)
            ? exports.Macro_Clear.fromPartial(object.clear)
            : undefined;
        message.subword = (_a = object.subword) !== null && _a !== void 0 ? _a : undefined;
        message.backup = (_b = object.backup) !== null && _b !== void 0 ? _b : undefined;
        return message;
    },
};
function createBaseMacro_Clear() {
    return {};
}
exports.Macro_Clear = {
    encode: function (_, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMacro_Clear();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (_) {
        return {};
    },
    toJSON: function (_) {
        var obj = {};
        return obj;
    },
    create: function (base) {
        return exports.Macro_Clear.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (_) {
        var message = createBaseMacro_Clear();
        return message;
    },
};
function createBaseMetadata() {
    return { name: "", description: "", sorting: 0, macros: [] };
}
exports.Metadata = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.name !== "") {
            writer.uint32(10).string(message.name);
        }
        if (message.description !== "") {
            writer.uint32(18).string(message.description);
        }
        if (message.sorting !== 0) {
            writer.uint32(24).int32(message.sorting);
        }
        for (var _i = 0, _a = message.macros; _i < _a.length; _i++) {
            var v = _a[_i];
            exports.Macro.encode(v, writer.uint32(34).fork()).join();
        }
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseMetadata();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.name = reader.string();
                    continue;
                }
                case 2: {
                    if (tag !== 18) {
                        break;
                    }
                    message.description = reader.string();
                    continue;
                }
                case 3: {
                    if (tag !== 24) {
                        break;
                    }
                    message.sorting = reader.int32();
                    continue;
                }
                case 4: {
                    if (tag !== 34) {
                        break;
                    }
                    message.macros.push(exports.Macro.decode(reader, reader.uint32()));
                    continue;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            name: isSet(object.name) ? globalThis.String(object.name) : "",
            description: isSet(object.description) ? globalThis.String(object.description) : "",
            sorting: isSet(object.sorting) ? sortingFromJSON(object.sorting) : 0,
            macros: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.macros) ? object.macros.map(function (e) { return exports.Macro.fromJSON(e); }) : [],
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if (message.name !== "") {
            obj.name = message.name;
        }
        if (message.description !== "") {
            obj.description = message.description;
        }
        if (message.sorting !== 0) {
            obj.sorting = sortingToJSON(message.sorting);
        }
        if ((_a = message.macros) === null || _a === void 0 ? void 0 : _a.length) {
            obj.macros = message.macros.map(function (e) { return exports.Macro.toJSON(e); });
        }
        return obj;
    },
    create: function (base) {
        return exports.Metadata.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a, _b, _c, _d;
        var message = createBaseMetadata();
        message.name = (_a = object.name) !== null && _a !== void 0 ? _a : "";
        message.description = (_b = object.description) !== null && _b !== void 0 ? _b : "";
        message.sorting = (_c = object.sorting) !== null && _c !== void 0 ? _c : 0;
        message.macros = ((_d = object.macros) === null || _d === void 0 ? void 0 : _d.map(function (e) { return exports.Macro.fromPartial(e); })) || [];
        return message;
    },
};
function createBaseLexicon() {
    return { metadata: undefined, instructions: [] };
}
exports.Lexicon = {
    encode: function (message, writer) {
        if (writer === void 0) { writer = new wire_1.BinaryWriter(); }
        if (message.metadata !== undefined) {
            exports.Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
        }
        writer.uint32(18).fork();
        for (var _i = 0, _a = message.instructions; _i < _a.length; _i++) {
            var v = _a[_i];
            writer.uint64(v);
        }
        writer.join();
        return writer;
    },
    decode: function (input, length) {
        var reader = input instanceof wire_1.BinaryReader ? input : new wire_1.BinaryReader(input);
        var end = length === undefined ? reader.len : reader.pos + length;
        var message = createBaseLexicon();
        while (reader.pos < end) {
            var tag = reader.uint32();
            switch (tag >>> 3) {
                case 1: {
                    if (tag !== 10) {
                        break;
                    }
                    message.metadata = exports.Metadata.decode(reader, reader.uint32());
                    continue;
                }
                case 2: {
                    if (tag === 16) {
                        message.instructions.push(longToNumber(reader.uint64()));
                        continue;
                    }
                    if (tag === 18) {
                        var end2 = reader.uint32() + reader.pos;
                        while (reader.pos < end2) {
                            message.instructions.push(longToNumber(reader.uint64()));
                        }
                        continue;
                    }
                    break;
                }
            }
            if ((tag & 7) === 4 || tag === 0) {
                break;
            }
            reader.skip(tag & 7);
        }
        return message;
    },
    fromJSON: function (object) {
        return {
            metadata: isSet(object.metadata) ? exports.Metadata.fromJSON(object.metadata) : undefined,
            instructions: globalThis.Array.isArray(object === null || object === void 0 ? void 0 : object.instructions)
                ? object.instructions.map(function (e) { return globalThis.Number(e); })
                : [],
        };
    },
    toJSON: function (message) {
        var _a;
        var obj = {};
        if (message.metadata !== undefined) {
            obj.metadata = exports.Metadata.toJSON(message.metadata);
        }
        if ((_a = message.instructions) === null || _a === void 0 ? void 0 : _a.length) {
            obj.instructions = message.instructions.map(function (e) { return Math.round(e); });
        }
        return obj;
    },
    create: function (base) {
        return exports.Lexicon.fromPartial(base !== null && base !== void 0 ? base : {});
    },
    fromPartial: function (object) {
        var _a;
        var message = createBaseLexicon();
        message.metadata = (object.metadata !== undefined && object.metadata !== null)
            ? exports.Metadata.fromPartial(object.metadata)
            : undefined;
        message.instructions = ((_a = object.instructions) === null || _a === void 0 ? void 0 : _a.map(function (e) { return e; })) || [];
        return message;
    },
};
function longToNumber(int64) {
    var num = globalThis.Number(int64.toString());
    if (num > globalThis.Number.MAX_SAFE_INTEGER) {
        throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
    }
    if (num < globalThis.Number.MIN_SAFE_INTEGER) {
        throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
    }
    return num;
}
function isSet(value) {
    return value !== null && value !== undefined;
}
