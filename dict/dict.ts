// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.7
//   protoc               v3.21.12
// source: dict/dict.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "";

export interface Macro {
  /**
   * Clears the word buffer. Placing this every so often in sorted
   * dictionaries can enable binary searches.
   */
  clear?:
    | Macro_Clear
    | undefined;
  /** Appends `subword` (typically a single UTF-8 letter) to the word buffer. */
  subword?:
    | string
    | undefined;
  /** Emits a copy of the word buffer, then deletes its last `backup` chars. */
  backup?: number | undefined;
}

export interface Macro_Clear {
}

export interface Metadata {
  name: string;
  description: string;
  macros: Macro[];
}

/** A word list, compressed and optimized for zero-copy searching. */
export interface Lexicon {
  metadata:
    | Metadata
    | undefined;
  /**
   * A sequence of indices into `metadata.macros` for generating a word list.
   * A "word buffer" is initialized as an empty string. Each instruction is
   * applied. Some instructions emit words to the list. After the last
   * instruction, if the word buffer is not empty, it is added to the list.
   */
  instructions: number[];
}

function createBaseMacro(): Macro {
  return { clear: undefined, subword: undefined, backup: undefined };
}

export const Macro: MessageFns<Macro> = {
  encode(message: Macro, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.clear !== undefined) {
      Macro_Clear.encode(message.clear, writer.uint32(10).fork()).join();
    }
    if (message.subword !== undefined) {
      writer.uint32(18).string(message.subword);
    }
    if (message.backup !== undefined) {
      writer.uint32(24).uint64(message.backup);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Macro {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMacro();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.clear = Macro_Clear.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.subword = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.backup = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Macro {
    return {
      clear: isSet(object.clear) ? Macro_Clear.fromJSON(object.clear) : undefined,
      subword: isSet(object.subword) ? globalThis.String(object.subword) : undefined,
      backup: isSet(object.backup) ? globalThis.Number(object.backup) : undefined,
    };
  },

  toJSON(message: Macro): unknown {
    const obj: any = {};
    if (message.clear !== undefined) {
      obj.clear = Macro_Clear.toJSON(message.clear);
    }
    if (message.subword !== undefined) {
      obj.subword = message.subword;
    }
    if (message.backup !== undefined) {
      obj.backup = Math.round(message.backup);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Macro>, I>>(base?: I): Macro {
    return Macro.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Macro>, I>>(object: I): Macro {
    const message = createBaseMacro();
    message.clear = (object.clear !== undefined && object.clear !== null)
      ? Macro_Clear.fromPartial(object.clear)
      : undefined;
    message.subword = object.subword ?? undefined;
    message.backup = object.backup ?? undefined;
    return message;
  },
};

function createBaseMacro_Clear(): Macro_Clear {
  return {};
}

export const Macro_Clear: MessageFns<Macro_Clear> = {
  encode(_: Macro_Clear, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Macro_Clear {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMacro_Clear();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): Macro_Clear {
    return {};
  },

  toJSON(_: Macro_Clear): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<Macro_Clear>, I>>(base?: I): Macro_Clear {
    return Macro_Clear.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Macro_Clear>, I>>(_: I): Macro_Clear {
    const message = createBaseMacro_Clear();
    return message;
  },
};

function createBaseMetadata(): Metadata {
  return { name: "", description: "", macros: [] };
}

export const Metadata: MessageFns<Metadata> = {
  encode(message: Metadata, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    for (const v of message.macros) {
      Macro.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Metadata {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMetadata();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.macros.push(Macro.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Metadata {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      macros: globalThis.Array.isArray(object?.macros) ? object.macros.map((e: any) => Macro.fromJSON(e)) : [],
    };
  },

  toJSON(message: Metadata): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.macros?.length) {
      obj.macros = message.macros.map((e) => Macro.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Metadata>, I>>(base?: I): Metadata {
    return Metadata.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Metadata>, I>>(object: I): Metadata {
    const message = createBaseMetadata();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.macros = object.macros?.map((e) => Macro.fromPartial(e)) || [];
    return message;
  },
};

function createBaseLexicon(): Lexicon {
  return { metadata: undefined, instructions: [] };
}

export const Lexicon: MessageFns<Lexicon> = {
  encode(message: Lexicon, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.metadata !== undefined) {
      Metadata.encode(message.metadata, writer.uint32(10).fork()).join();
    }
    writer.uint32(18).fork();
    for (const v of message.instructions) {
      writer.uint64(v);
    }
    writer.join();
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Lexicon {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    const end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseLexicon();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.metadata = Metadata.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag === 16) {
            message.instructions.push(longToNumber(reader.uint64()));

            continue;
          }

          if (tag === 18) {
            const end2 = reader.uint32() + reader.pos;
            while (reader.pos < end2) {
              message.instructions.push(longToNumber(reader.uint64()));
            }

            continue;
          }

          break;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Lexicon {
    return {
      metadata: isSet(object.metadata) ? Metadata.fromJSON(object.metadata) : undefined,
      instructions: globalThis.Array.isArray(object?.instructions)
        ? object.instructions.map((e: any) => globalThis.Number(e))
        : [],
    };
  },

  toJSON(message: Lexicon): unknown {
    const obj: any = {};
    if (message.metadata !== undefined) {
      obj.metadata = Metadata.toJSON(message.metadata);
    }
    if (message.instructions?.length) {
      obj.instructions = message.instructions.map((e) => Math.round(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Lexicon>, I>>(base?: I): Lexicon {
    return Lexicon.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Lexicon>, I>>(object: I): Lexicon {
    const message = createBaseLexicon();
    message.metadata = (object.metadata !== undefined && object.metadata !== null)
      ? Metadata.fromPartial(object.metadata)
      : undefined;
    message.instructions = object.instructions?.map((e) => e) || [];
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
